Dla chętnych
Jeśli zechcesz rozbudować funkcjonalność tego projektu, mamy kilka pomysłów, których wdrożenie na pewno podniosłoby jego jakość.

Po dodaniu produktu z menu do koszyka, ten produkt powinien powracać do domyślnego stanu (takiego samego, jak tuż po wczytaniu strony). Podobnie, po wysłaniu zamówienia, koszyk powinien się opróżniać.
Nie powinno być możliwości wysłania zamówienia, kiedy brakuje numeru telefonu, adresu, lub produktów w koszyku. W przypadku numeru telefonu i adresu można wprowadzić podstawową walidację, opartą np. o długość wpisanego tekstu. Błędne pola powinny otrzymać klasę error, która np. zmieni kolor ich obramowania na czerwony. Walidacja musi działać również po zmianie wartości (event change), aby po wpisaniu poprawnej wartości nie było już czerwonej ramki.
Koszyk mógłby mieć jakiś wizualny efekt przy zmianie jego zawartości. Np. w momencie zmiany jego zawartości, ceny i ilość sztuk w koszyku mogłyby na moment dostawać klasę, dla której byłoby ustawione opacity: 0.5;. W połączeniu ze stylem transition, może to dać ciekawy efekt – szczególnie jeśli dla tej klasy ustawimy transition: none;, a dla elementów bez tej klasy, np. transition: opacity 0.5s;.
Nasze zamówienie, zapisane w bazie, dla każdego produktu zawiera jego parametry i ich opcje. Nie są nam jednak potrzebne ich nazwy (label), ponieważ zakładamy że API potrzebuje znać tylko id parametrów i opcji. Dobrym pomysłem byłaby zmiana w CartProduct.getData, aby zamiast zwracać thisCartProduct.params, stworzyć nowy obiekt, który zawierałby wyłącznie id parametrów i opcji.
Aby korzystanie ze strony było wygodniejsze, możesz sprawić, aby nagłówek był sticky, czyli był zawsze widoczny na górze okna przeglądarki, niezależnie od przewijania strony.
Jeśli dobrze radzisz sobie z JS-em, możesz też spróbować stworzyć własną klasę API, która będzie upraszczać korzystanie z komunikacji z serwerem. Warto wtedy rozszerzyć jej funkcjonalność o wychwytywanie błędów, wyszukując w Google np. "js fetch catch errors" czy "js fetch catch 404".
Jak widzisz, jest sporo rzeczy do zrobienia, ale zapewne nie znajdziesz w tej chwili czasu na ich wdrożenie. Tym bardziej istotne jest dla nas podejście obiektowe, czyli OOP. Dzięki temu, wracając do tego projektu za kilka miesięcy, będzie Ci znacznie łatwiej odnaleźć się w kodzie JS.